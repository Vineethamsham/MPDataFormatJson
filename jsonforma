import os, json
from typing import List
from langchain_core.documents import Document

def load_full_json(path: str) -> List[Document]:
    documents = []

    print(f"\nScanning folder: {path}")
    if not os.path.exists(path):
        print("Path not found")
        return []

    for filename in os.listdir(path):
        if not filename.lower().endswith(".json"):
            print("Skipped non JSON file:", filename)
            continue

        file_path = os.path.join(path, filename)
        print(f"Reading: {file_path}")

        try:
            with open(file_path, "r", encoding="utf-8") as f:
                data = json.load(f)
                print("Loaded JSON keys:", list(data.keys()))
        except json.JSONDecodeError:
            print(f"Skipping invalid JSON file: {filename}")
            continue

        # Extract metadata
        plan_id = data.get("title", filename.replace(".json", ""))
        source_url = data.get("url", "")
        sections = data.get("sections", [])

        # Join all section contents into one full_text
        all_texts = []
        for section in sections:
            section_text_list = section.get("content", [])
            if isinstance(section_text_list, list):
                section_text = "\n".join(section_text_list)
            elif isinstance(section_text_list, str):
                section_text = section_text_list
            else:
                continue

            if section_text.strip():
                all_texts.append(section_text.strip())

        full_text = "\n\n".join(all_texts)

        if full_text.strip():
            doc = Document(
                page_content=full_text,
                metadata={
                    "plan_id": plan_id,
                    "source_url": source_url,
                    "version": "v1",
                    "category": "plans"
                }
            )
            documents.append(doc)

    print(f"Loaded {len(documents)} full-doc documents from {path}")
    return documents
